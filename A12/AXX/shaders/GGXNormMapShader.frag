#version 450#extension GL_ARB_separate_shader_objects : enable#define PI 3.1415926538layout(location = 0) in vec3 fragPos;layout(location = 1) in vec3 fragNorm;layout(location = 2) in vec4 fragTan;layout(location = 3) in vec2 fragUV;layout(location = 0) out vec4 outColor;layout(binding = 1) uniform sampler2D tex;layout(binding = 3) uniform sampler2D normMap;layout(binding = 4) uniform sampler2D matMap;layout(binding = 2) uniform GlobalUniformBufferObject {	vec3 lightDir;	vec4 lightColor;	vec3 eyePos;} gubo;vec3 BRDF(vec3 V, vec3 N, vec3 L, vec3 Md, float F0, float metallic, float roughness) {	//vec3 V  - direction of the viewer	//vec3 N  - normal vector to the surface	//vec3 L  - light vector (from the light model)	//vec3 Md - main color of the surface	//float F0 - Base color for the Fresnel term	//float metallic - parameter that mixes the diffuse with the specular term.	//                 in particular, parmeter K seen in the slides is: 	//float K = 1.0f - metallic;	float K = metallic;	//float roughness - Material roughness (parmeter rho in the slides).	//specular color Ms is not passed, and implicitely considered white: 	vec3 Ms = vec3(1.0f);		//float rough = pow(roughness,2);	//rough = pow(rough,2);	float rough = roughness;	vec3 h = normalize(L + V);	float D = rough / (PI * pow( pow(clamp(dot(N,h),0.0,1.0),2) * (rough - 1) + 1 ,2));		float F = F0 + (1 - F0) * pow(1 - clamp(dot(V,h),0.0,1.0),5);	//F = 1;	float G1 = 2 / (1 + sqrt(1 + (rough * (1-pow(dot(N,V),2)) / pow(dot(N,V),2) )));	float G2 = 2 / (1 + sqrt(1 + (rough * (1-pow(dot(N,L),2)) / pow(dot(N,L),2) )));	float G = G1 * G2; 		// test	//G = min(min(1, (2 * dot(h,N)*dot(V,N)) / dot(V,h)), (2 * dot(h,N)*dot(L,N)) / dot(V,h));	//D = pow(dot(h,N), (2/rough)-2) / (3.14 * rough); 	//D = exp(-(1 - pow(dot(h,N),2))/ pow(dot(h,N),2) * rough) / (3.14 * rough * pow(dot(h,N),4));		vec3 specular = Ms * ((D * F * G) / (4 * clamp(dot(V,N),0.0,1.0)));		// both are fine	vec3 diffuse = Md * clamp(dot(L,N),0.0,1.0);	//vec3 diffuse = Md * max(dot(L,N),0.0);			vec3 res = K * diffuse + (1 - K) * specular;	return res;}void main() {	vec3 Norm = normalize(fragNorm);	vec3 Tan = normalize(fragTan.xyz - Norm * dot(fragTan.xyz, Norm));	vec3 Bitan = cross(Norm, Tan) * fragTan.w;	mat3 tbn = mat3(Tan, Bitan, Norm);	vec4 nMap = texture(normMap, fragUV);	vec3 N = normalize(tbn * (nMap.rgb * 2.0 - 1.0));	vec3 albedo = texture(tex, fragUV).rgb;	vec4 MRAO = texture(matMap, fragUV);	float roughness = MRAO.g;	float ao = MRAO.b;	float metallic = MRAO.r;		vec3 L = gubo.lightDir;	vec3 lightColor = gubo.lightColor.rgb;	vec3 V = normalize(gubo.eyePos - fragPos);	vec3 DiffSpec = BRDF(V, N, L, albedo, 0.3f, metallic, roughness);	vec3 Ambient = albedo * 0.05f * ao;		outColor = vec4(clamp(0.95 * DiffSpec * lightColor.rgb + Ambient,0.0,1.0), 1.0f);}